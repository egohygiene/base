#!/usr/bin/env bash
# shellcheck shell=bash
# cspell: ignore: ONLN
set -Eeuo pipefail

## @file install-imagemagick
## @brief Reproducible ImageMagick build with apt lock support.
## @version 1.3.0
## @description
##   Builds ImageMagick from an official, pinned release tarball (.tar.xz),
##   verifies checksums, installs apt delegates (optionally via a lock file),
##   and installs to a custom prefix.
##
##   Safety/compat tweaks:
##     - Official release tarball (stable digest), optional --url override
##     - Shared libs only (no static), OpenMP disabled, no jemalloc/perl
##     - Libraries registered via /etc/ld.so.conf.d (no global LD_LIBRARY_PATH)
##     - Optional hardened policy.xml
##
## @usage
##   install-imagemagick [--version 7.1.1-47] [--sha256 HEX] [--md5 HEX]
##       [--url https://download.imagemagick.org/...tar.xz]
##       [--prefix /opt/imagemagick]
##       [--lock|--from-lock|--no-deps]
##       [--harden-policy] [--symlink-bin]
##       [--no-color] [--debug]
##
## @options
##   --version <v>       ImageMagick version (e.g., 7.1.1-47). Default: $IMAGEMAGICK_VERSION or 7.1.1-47
##   --sha256 <hex>      Expected SHA256 for tarball (recommended)
##   --md5 <hex>         Expected MD5 for tarball (optional)
##   --url <url>         Override tarball URL (defaults to official release URL for --version)
##   --prefix <dir>      Install prefix (default: $IMAGEMAGICK_PREFIX or $UNIVERSAL_TOOLBOX/imagemagick)
##   --lock              Install apt deps and write lock file of versions installed
##   --from-lock         Install apt deps from existing lock file
##   --no-deps           Skip apt deps installation
##   --harden-policy     Write conservative policy.xml (safer defaults)
##   --symlink-bin       Symlink installed binaries into $UNIVERSAL_BIN
##   --no-color          Disable ANSI colors in logs
##   --debug             Verbose logs to stderr
##   -h, --help          Show help and exit
##
## @env IMAGEMAGICK_VERSION  Default version if --version omitted
## @env IMAGEMAGICK_SHA256   Default SHA256 if --sha256 omitted
## @env IMAGEMAGICK_MD5      Default MD5 if --md5 omitted
## @env IMAGEMAGICK_URL      Optional override for the source tarball URL
## @env UNIVERSAL_HOME       Default /opt/universal
## @env UNIVERSAL_TOOLBOX    Default $UNIVERSAL_HOME/toolbox
## @env UNIVERSAL_BIN        Default $UNIVERSAL_HOME/bin
## @env UNIVERSAL_LOCKS      Default $UNIVERSAL_HOME/locks
## @env IMAGEMAGICK_PREFIX   Install prefix override
## @env ZIP_CACHE_DIR        Cache dir for source (default: $XDG_CACHE_HOME or /var/cache/src)
## @env USE_COLOR            Enable colored logs (default: true; auto-disabled if not a TTY)
## @env DEBUG                Verbose logs (default: false)
##
## @exitcode
##   0 on success; 1 on usage/runtime error; 127 if required tools are missing

# ---------------- defaults ----------------

IM_VERSION="${IMAGEMAGICK_VERSION:-7.1.1-47}"
# SHA256 for official .tar.xz of 7.1.1-47 (matches your build output)
IM_SHA256="${IMAGEMAGICK_SHA256:-2396cd3c4237cfbc09a89d31d1cee157ee11fbc8ec1e540530e10175cb707160}"
IM_MD5="${IMAGEMAGICK_MD5:-}"

IM_URL_DEFAULT="https://download.imagemagick.org/ImageMagick/download/releases/ImageMagick-${IM_VERSION}.tar.xz"
IM_URL="${IMAGEMAGICK_URL:-${IM_URL_DEFAULT}}"

UNIVERSAL_HOME="${UNIVERSAL_HOME:-/opt/universal}"
UNIVERSAL_TOOLBOX="${UNIVERSAL_TOOLBOX:-${UNIVERSAL_HOME}/toolbox}"
UNIVERSAL_BIN="${UNIVERSAL_BIN:-${UNIVERSAL_HOME}/bin}"
UNIVERSAL_LOCKS="${UNIVERSAL_LOCKS:-${UNIVERSAL_HOME}/locks}"
LOCK_FILE="${UNIVERSAL_LOCKS}/imagemagick.apt.lock"

IM_PREFIX="${IMAGEMAGICK_PREFIX:-${UNIVERSAL_TOOLBOX}/imagemagick}"

ZIP_CACHE_DIR="${ZIP_CACHE_DIR:-${XDG_CACHE_HOME:-/var/cache/src}}"
USE_COLOR="${USE_COLOR:-true}"
DEBUG="${DEBUG:-false}"

TMP_DIR="${TMPDIR:-/tmp}/imagemagick"
SRC_DIR=""
TARBALL_PATH=""

# ---------------- logging & utils ----------------

color() {
  [[ "${USE_COLOR}" == true ]] || { printf ''; return 0; }
  case "${1:-}" in
    red) printf '\033[31m';; green) printf '\033[32m';;
    yellow) printf '\033[33m';; cyan) printf '\033[36m';;
    reset) printf '\033[0m';; *) printf '';;
  esac
}
log() {
  local lvl="${1:-}"; shift || true; local p c
  case "${lvl}" in
    info) p='👉'; c=$(color cyan) ;;
    success) p='✅'; c=$(color green) ;;
    warn) p='⚠️'; c=$(color yellow) ;;
    error) p='❌'; c=$(color red) ;;
    debug) [[ "${DEBUG}" == true ]] || return 0; p='🐞'; c=$(color cyan) ;;
    *) p=''; c=$(color reset) ;;
  esac
  printf '%s%s %s%s\n' "${c}" "${p}" "$*" "$(color reset)" >&2
}
die() { local code="$1"; shift || true; log error "$*"; exit "$code"; }
[[ -t 2 ]] || USE_COLOR=false

sudo_if_needed() {
  if [[ "${EUID:-$(id -u)}" -ne 0 ]]; then
    command -v sudo >/dev/null 2>&1 && printf 'sudo' || printf ''
  else
    printf ''
  fi
}
require_cmd() { command -v "$1" >/dev/null 2>&1 || die 127 "Missing required command: $1"; }

cleanup() { [[ -n "${TMP_DIR}" && -d "${TMP_DIR}" ]] && rm -rf -- "${TMP_DIR}" || true; }
trap cleanup EXIT
trap 'log error "Failed at line $LINENO: $BASH_COMMAND"' ERR

usage() {
  cat <<'EOF'
Usage:
  install-imagemagick [--version <7.1.1-47>] [--sha256 HEX] [--md5 HEX]
                      [--url <tarball-url>] [--prefix <dir>]
                      [--lock|--from-lock|--no-deps]
                      [--harden-policy] [--symlink-bin]
                      [--no-color] [--debug]
EOF
}

# ---------------- args ----------------

DO_LOCK=false
FROM_LOCK=false
NO_DEPS=false
HARDEN=false
SYMLINK_BIN=false

parse_args() {
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --version)  [[ $# -ge 2 ]] || die 1 "--version requires a value"; IM_VERSION="$2"; shift ;;
      --sha256)   [[ $# -ge 2 ]] || die 1 "--sha256 requires a value"; IM_SHA256="$2"; shift ;;
      --md5)      [[ $# -ge 2 ]] || die 1 "--md5 requires a value"; IM_MD5="$2"; shift ;;
      --url|--source-url) [[ $# -ge 2 ]] || die 1 "--url requires a value"; IM_URL="$2"; shift ;;
      --prefix)   [[ $# -ge 2 ]] || die 1 "--prefix requires a dir"; IM_PREFIX="$2"; shift ;;
      --lock)       DO_LOCK=true ;;
      --from-lock)  FROM_LOCK=true ;;
      --no-deps)    NO_DEPS=true ;;
      --harden-policy) HARDEN=true ;;
      --symlink-bin)  SYMLINK_BIN=true ;;
      --no-color)   USE_COLOR=false ;;
      --debug)      DEBUG=true ;;
      -h|--help)    usage; exit 0 ;;
      *) die 1 "Unknown option: $1" ;;
    esac
    shift
  done

    IM_URL_DEFAULT="https://download.imagemagick.org/ImageMagick/download/releases/ImageMagick-${IM_VERSION}.tar.xz"
    # Avoid set -e pitfalls: use if instead of [[ ... ]] && ...
    if [[ -z "${IM_URL:-}" ]]; then
        IM_URL="${IM_URL_DEFAULT}"
    fi
}

# ---------------- apt deps & lock ----------------

install_deps() {
  $NO_DEPS && { log debug "Skipping apt deps (--no-deps)."; return; }
  require_cmd apt-get

  if [[ -r /etc/os-release ]]; then . /etc/os-release; else die 1 "/etc/os-release not found"; fi
  local ID_LIKE_LOWER; ID_LIKE_LOWER="$(printf '%s' "${ID_LIKE:-}" | tr '[:upper:]' '[:lower:]')"
  local IS_UBU=false
  if [[ "${ID:-}" == "ubuntu" || "${ID_LIKE_LOWER}" == *"ubuntu"* ]]; then IS_UBU=true; fi

  log info "Installing apt build/delegate dependencies… (distro: ${ID} ${VERSION_CODENAME:-})"

  local base_deps=(
    autoconf build-essential ca-certificates curl git
    pkg-config xz-utils zlib1g-dev libxml2-dev libzip-dev libzstd-dev
    libbz2-dev liblzma-dev libexpat1-dev libtool
    libpng-dev libtiff-dev libwebp-dev libheif-dev
    liblcms2-dev libfreetype6-dev libfontconfig1-dev
    libopenjp2-7-dev libopenexr-dev libraw-dev librsvg2-dev
    libfftw3-dev liblqr-1-0-dev
    libx11-dev libxext-dev libxft-dev libxcursor-dev libxinerama-dev libxrandr-dev
    libcairo2-dev libgdk-pixbuf2.0-dev libgraphviz-dev libgs-dev
    libdjvulibre-dev libjbig-dev libwmf-dev libwmf-bin
    libminizip-dev libdb-dev libgif-dev
  )

  local jpeg_dev_pkg
  if $IS_UBU; then
    jpeg_dev_pkg="libjpeg-turbo8-dev"
    if ! command -v add-apt-repository >/dev/null 2>&1; then
      apt-get update -qq
      apt-get install --yes --no-install-recommends software-properties-common
    fi
    add-apt-repository --yes universe || true
  else
    jpeg_dev_pkg="libjpeg62-turbo-dev"
  fi

  apt-get update -qq
  apt-get install --yes --no-install-recommends "${base_deps[@]}" "${jpeg_dev_pkg}"
}

install_deps_from_lock() {
  $NO_DEPS && { log debug "Skipping apt deps (--no-deps)."; return; }
  require_cmd apt-get
  [[ -f "${LOCK_FILE}" ]] || die 1 "Lock file not found: ${LOCK_FILE}"
  log info "Installing apt packages from lock: ${LOCK_FILE}"
  apt-get update -qq
  xargs -a "${LOCK_FILE}" apt-get install -y --no-install-recommends
}

generate_lock_file() {
  require_cmd dpkg-query
  log info "Generating apt lock file: ${LOCK_FILE}"
  mkdir -p "${UNIVERSAL_LOCKS}"
  dpkg-query -W -f='${Package}=${Version}\n' > "${LOCK_FILE}"
  log success "Wrote ${LOCK_FILE}"
}

# ---------------- fetch, verify, build ----------------

download_source() {
  mkdir -p -- "${ZIP_CACHE_DIR%/}"
  local tarball_file; tarball_file="$(basename "${IM_URL}")"
  TARBALL_PATH="${ZIP_CACHE_DIR%/}/${tarball_file}"
  if [[ -f "${TARBALL_PATH}" ]]; then
    log info "Using cached tarball: ${TARBALL_PATH}"
    return
  fi
  log info "Downloading ImageMagick ${IM_VERSION} from ${IM_URL}"
  curl --fail --location --retry 3 --retry-connrefused \
    --output "${TARBALL_PATH}" "${IM_URL}"
}

verify_checksums() {
  [[ -n "${IM_SHA256}" ]] || log warn "No SHA256 provided — skipping verification"
  if [[ -n "${IM_SHA256}" ]]; then
    require_cmd sha256sum
    local actual; actual="$(sha256sum "${TARBALL_PATH}" | awk '{print $1}')"
    if [[ "${actual}" != "${IM_SHA256}" ]]; then
      log warn "SHA256 mismatch: expected ${IM_SHA256}, got ${actual}; re-fetching once…"
      rm -f -- "${TARBALL_PATH}"
      download_source
      actual="$(sha256sum "${TARBALL_PATH}" | awk '{print $1}')"
      [[ "${actual}" == "${IM_SHA256}" ]] || die 1 "SHA256 mismatch after re-fetch: expected ${IM_SHA256}, got ${actual}"
    fi
    log success "SHA256 verified."
  fi

  if [[ -n "${IM_MD5}" ]]; then
    require_cmd md5sum
    local actual; actual="$(md5sum "${TARBALL_PATH}" | awk '{print $1}')"
    [[ "${actual}" == "${IM_MD5}" ]] || die 1 "MD5 mismatch: expected ${IM_MD5}, got ${actual}"
    log success "MD5 verified."
  fi
}

extract_source() {
  TMP_DIR="$(mktemp -d "${TMPDIR:-/tmp}/imagemagick.XXXXXXXX")"
  SRC_DIR="${TMP_DIR}/src"
  mkdir -p "${SRC_DIR}"
  log info "Extracting tarball to ${SRC_DIR}"
  tar -xf "${TARBALL_PATH}" --strip-components=1 -C "${SRC_DIR}"
}

configure_build() {
  log info "Configuring build (prefix: ${IM_PREFIX})"
  mkdir -p "${IM_PREFIX}"
  (
    cd "${SRC_DIR}"
    ./configure \
      --prefix="${IM_PREFIX}" \
      --enable-hdri \
      --enable-shared \
      --disable-static \
      --disable-openmp \
      --with-modules \
      --with-quantum-depth=16 \
      --with-bzlib \
      --with-fftw \
      --with-fontconfig \
      --with-freetype \
      --with-gslib \
      --with-gvc \
      --with-heic \
      --with-lcms \
      --with-lqr \
      --with-openexr \
      --with-raw \
      --with-rsvg \
      --with-utilities \
      --with-webp \
      --with-wmf \
      --with-x \
      --with-openjp2 \
      --with-png \
      --with-tiff \
      --with-jpeg
  )
}

build_and_install() {
  log info "Building ImageMagick…"
  local jobs; jobs="$(getconf _NPROCESSORS_ONLN 2>/dev/null || echo 2)"
  (
    cd "${SRC_DIR}"
    make -j"${jobs}"
    $(sudo_if_needed) make install
  )
  # Ensure runtime resolves our libs (avoid global LD_LIBRARY_PATH)
  if command -v ldconfig >/dev/null 2>&1; then
    echo "${IM_PREFIX}/lib" | $(sudo_if_needed) tee /etc/ld.so.conf.d/imagemagick.conf >/dev/null
    $(sudo_if_needed) ldconfig || true
  fi
  log success "Installed to ${IM_PREFIX}"
}

harden_policy() {
  $HARDEN || { log debug "Skipping policy hardening"; return; }
  local etc="${IM_PREFIX}/etc/ImageMagick-7"
  mkdir -p -- "${etc}"
  cat > "${etc}/policy.xml" <<'XML'
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE policymap PUBLIC "-//ImageMagick//DTD Policy//EN" "http://www.imagemagick.org/script/policy.dtd">
<policymap>
  <!-- Resource limits -->
  <policy domain="resource" name="memory" value="256MiB"/>
  <policy domain="resource" name="map"    value="512MiB"/>
  <policy domain="resource" name="width"  value="16384"/>
  <policy domain="resource" name="height" value="16384"/>
  <policy domain="resource" name="threads" value="2"/>
  <!-- Safer defaults: disable PS/PDF/XPS coders unless explicitly enabled -->
  <policy domain="coder" rights="none" pattern="PS,EPS,PDF,XPS"/>
  <!-- Disallow indirect @path references -->
  <policy domain="path" rights="none" pattern="@*"/>
</policymap>
XML
  log info "Wrote hardened policy.xml (${etc}/policy.xml)"
}

symlink_binaries() {
  $SYMLINK_BIN || { log debug "Skipping bin symlinks"; return; }
  log info "Linking binaries into ${UNIVERSAL_BIN}…"
  mkdir -p "${UNIVERSAL_BIN}"
  for bin in "${IM_PREFIX}/bin/"*; do
    ln -sf "${bin}" "${UNIVERSAL_BIN}/$(basename "${bin}")"
  done
}

verify_install() {
  log info "Verifying ImageMagick runtime…"
  "${IM_PREFIX}/bin/magick" -version | sed 's/^/  /'
  # Non-fatal delegate probe
  if ! identify -list format 2>/dev/null | egrep -q 'PNG|JPEG|TIFF|WEBP|HEIC'; then
    log warn "Core formats not visible in 'identify -list format' (check delegates, policy)"
  fi
  log success "ImageMagick ${IM_VERSION} is ready."
}

# ---------------- main ----------------

main() {
  parse_args "$@"

  require_cmd curl
  require_cmd tar
    require_cmd sha256sum
    # md5sum only required if IM_MD5 provided
    if [[ -n "${IM_MD5}" ]]; then
        require_cmd md5sum
    fi

  if $FROM_LOCK; then
    install_deps_from_lock
  elif $DO_LOCK; then
    install_deps
    generate_lock_file
  else
    install_deps
  fi

  download_source
  verify_checksums
  extract_source
  configure_build
  build_and_install
  harden_policy
  symlink_binaries
  verify_install

  log success "Done."
}

main "$@"
