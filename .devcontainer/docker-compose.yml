---
# yaml-language-server: $schema=https://raw.githubusercontent.com/compose-spec/compose-spec/master/schema/compose-spec.json

######################################################################
# docker-compose configuration for the devcontainer
#
# The dev service builds the image defined in Dockerfile and mounts the
# repository into /workspace. The container is kept running with a
# "sleep infinity" command so that VS Code can attach to it.
######################################################################

# Define common labels for Docker objects
x-labels: &labels
  labels:
    app.name: development
    app.scope: development

# Shared settings for all services
x-settings: &settings # Restart containers unless stopped manually
  restart: unless-stopped
  # Environment variables for all services
  environment:
    - TZ=${TZ:-UTC}
  # Use a common .env file for environment variables
  # env_file:
  #   - .env.devcontainer
  # Allow access to the host machine from the container
  extra_hosts:
    - "host.docker.internal:host-gateway"
  # Init system for graceful shutdown
  init: true
  # Pull policy for images
  pull_policy: missing
  # Attach the container to the project network
  networks:
    default:
      aliases:
        - development-network
  # Use a specific platform for compatibility
  platform: linux/amd64
  # Apply the common labels to all services
  <<: *labels

# Define the Docker network for all services
networks:
  default:
    # Name of the Docker network, based on the project name
    name: development-network
    # Use the bridge driver for the network (https://docs.docker.com/compose/networking/)
    driver: bridge
    # Allows containers to manually attach to this network
    attachable: true
    # Custom options for bridge network driver
    driver_opts:
      com.docker.network.bridge.enable_icc: "true"
      com.docker.network.bridge.enable_ip_masquerade: "true"
    <<: *labels

# Define named volumes for persistent data storage
volumes:
  portainer_data:
    name: portainer_data
    <<: *labels

services:
  development:
    container_name: development
    hostname: development
    build:
      context: ..
      target: final
      dockerfile: .devcontainer/Dockerfile
      args:
        - INSTALL_RUST=${INSTALL_RUST:-false}
        - INSTALL_GOOGLE_FONTS=${INSTALL_GOOGLE_FONTS:-false}
        - INSTALL_IMAGEMAGICK=${INSTALL_IMAGEMAGICK:-false}
        - INSTALL_E57FORMAT=${INSTALL_E57FORMAT:-false}
        - INSTALL_PDAL=${INSTALL_PDAL:-false}
        - INSTALL_SHDOC=${INSTALL_SHDOC:-false}
    volumes:
      # Mount the repository so that changes on the host are reflected inside the container
      - ..:/workspace:cached
    command: sleep infinity
    privileged: true # required for docker-in-docker
    user: vscode
    <<: *settings

  portainer:
    image: portainer/portainer-ce@sha256:d5b9eba8d4d2f4e952aee6a6fb154e618857a976f734bfcec5a5603b03f45acd
    container_name: ${PORTAINER_CONTAINER_NAME:-portainer}
    hostname: ${PORTAINER_HOSTNAME:-portainer}
    ports:
      - "${PORTAINER_EXPOSED_PORT:-9000}:9000"
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    <<: *settings

  # pgAdmin service for managing the PostGIS database
  # pgadmin:
  #   image: dpage/pgadmin4@sha256:6b1c0db09695758c72abcd5160b7c4cc6d0847ab0c90a2403bdbf951f0defb5a
  #   container_name: ${PGADMIN_CONTAINER_NAME:-pgadmin}
  #   hostname: ${PGADMIN_HOSTNAME:-pgadmin}
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@${APP_NAME}.localhost}
  #     PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-adminpassword}
  #     PGADMIN_CONFIG_ALLOW_SPECIAL_EMAIL_DOMAINS: "['localhost']"
  #     PGADMIN_LISTEN_PORT: ${PGADMIN_PORT:-5050}
  #   ports:
  #     - "${PGADMIN_EXPOSED_PORT:-5050}:${PGADMIN_PORT:-5050}"
  #   volumes:
  #     - pgadmin:/var/lib/pgadmin
  #     - ./services/pgadmin/servers.json:/pgadmin4/servers.json:ro
  #     - ./services/pgadmin/config_local.py:/pgadmin4/config_local.py:ro
  #     - ./services/pgadmin/healthcheck.py:/pgadmin4/healthcheck.py:ro
  #   depends_on:
  #     database:
  #       condition: service_healthy
  #   healthcheck:
  #     test: ["CMD-SHELL", "python3 /pgadmin4/healthcheck.py"]
  #     interval: 10s
  #     timeout: 10s
  #     retries: 10
  #   <<: *settings
