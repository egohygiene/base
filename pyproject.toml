[tool.poetry]
name = "egohygiene-base"
version = "0.1.0"
description = "Development tooling, configuration, and linters for Ego Hygiene projects."
license = "MIT"
readme = "README.md"
package-mode = false
requires-python = ">=3.12"
authors = [
  { name = "Alan Szmyt", email = "szmyty@gmail.com"}
]

[tool.poetry.dependencies]
python = "^3.12"

[tool.poetry.group.dev.dependencies]
black = "25.1.0"
pre-commit = "4.2.0"
pre-commit-hooks = "5.0.0"

[build-system]
requires = ["poetry-core>=1.5"]
build-backend = "poetry.core.masonry.api"

[tool.black]
# Black code formatter configuration
# Docs: https://black.readthedocs.io/en/stable/usage_and_configuration/the_basics.html#configuration-via-a-file
line-length = 88
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
    | \.git
    | \.hg
    | \.mypy_cache
    | \.ruff_cache
    | \.pytest_cache
    | \.tox
    | \.cache
    | \.venv
    | \.ipynb_checkpoints
    | \.lsp_symlink
    | _build
    | buck-out
    | build
    | dist
    | migrations
    | venv
    # The following are specific to Black, you probably don't want those.
    | blib2to3
    | resources
)/
'''

[tool.ruff]
# Ruff linter configuration
# Docs: https://github.com/charliermarsh/ruff
allowed-confusables = ["−", "ρ", "∗"]
builtins = ["_"]
cache-dir = ".cache/.ruff_cache"
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
exclude = [
    ".bzr", ".cache", ".coverage", ".direnv", ".eggs", ".env", ".git", ".hg", ".idea",
    ".ipynb_checkpoints", ".mypy_cache", ".nox", ".pants.d", ".pytype", ".ruff_cache",
    ".sha1", ".svn", ".tox", ".venv", "__pycache__", "__pypackages__", "_build",
    "buck-out", "build", "dist", "docker", "docs", "logs", "node_modules", "out",
    "resources", "scripts", "site", "sql", "venv"
]
extend-exclude = ["./config"]
extend-ignore = []
extend-select = ["B", "Q"]
external = []
fix = false
fix-only = false
fixable = [
    "A", "ANN", "ARG", "B", "BLE", "C", "COM", "D", "DTZ", "E", "EM", "ERA", "EXE",
    "F", "FBT", "G", "I", "ICN", "INP", "ISC", "N", "PD", "PGH", "PIE", "PL", "PT",
    "PTH", "Q", "RET", "RUF", "S", "SIM", "T", "TID", "TRY", "UP", "W", "YTT"
]
force-exclude = false
ignore = []
ignore-init-module-imports = true
line-length = 88
namespace-packages = []
required-version = "0.0.256"
respect-gitignore = true
select = ["ALL"]
show-fixes = true
src = ["."]
target-version = "py312"
task-tags = ["TODO", "FIXME", "XXX", "HACK"]
typing-modules = ["airflow.typing_compat"]
unfixable = ["F401"]

[tool.ruff.per-file-ignores]
"__init__.py" = ["I001"]

[tool.ruff.pydocstyle]
# Pydocstyle configuration for docstring style checking
# Docs: https://github.com/PyCQA/pydocstyle
convention = "google"
ignore-decorators = ["typing.overload"]
property-decorators = []

[tool.ruff.flake8-annotations]
# Flake8 annotations configuration
# Docs: https://github.com/sco1/flake8-annotations
allow-star-arg-any = false
ignore-fully-untyped = false
mypy-init-return = false
suppress-dummy-args = false
suppress-none-returning = false

[tool.ruff.flake8-bandit]
# Flake8 bandit configuration for security checks
# Docs: https://github.com/tylerwince/flake8-bandit
check-typed-exception = false
hardcoded-tmp-directory = ["/tmp", "/var/tmp", "/dev/shm"]

[tool.ruff.flake8-bugbear]
# Flake8 bugbear configuration for finding likely bugs
# Docs: https://github.com/PyCQA/flake8-bugbear
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query"]

[tool.ruff.flake8-builtins]
# Flake8 builtins configuration to avoid shadowing Python builtins
# Docs: https://github.com/gforcada/flake8-builtins
builtins-ignorelist = ["id"]

[tool.ruff.flake8-comprehensions]
# Flake8 comprehensions configuration to simplify comprehensions
# Docs: https://github.com/adamchainz/flake8-comprehensions
allow-dict-calls-with-keyword-arguments = false
